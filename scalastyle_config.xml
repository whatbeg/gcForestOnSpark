<!--
We use the scala style configuration from Apache Spark
If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:
  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on
You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-0.7.0.html
  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize
-->
<scalastyle>
    <name>Scalastyle standard configuration</name>

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"></check>
    <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">
        <parameters>
            <parameter name="header"><![CDATA[/*
 * Copyright 2017 Authors NJU PASA BigData Laboratory. Qiu Hu. huqiu00#163.com
 */]]></parameter>
        </parameters>
    </check>

    <!--<check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>-->

    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>

    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[120]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports">true</parameter>
        </parameters>
    </check>

    <!--<check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">-->
        <!--<parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">-->
        <!--<parameters><parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter></parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">-->
        <!--<parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">-->
        <!--<parameters><parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter></parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="singleLineAllowed"><![CDATA[true]]></parameter>-->
            <!--<parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>-->
        <!--</parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"></check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>-->
        <!--</parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>-->
        <!--</parameters>-->
    <!--</check>-->
    <!--&lt;!&ndash; ??? usually shouldn't be checked into the code base. &ndash;&gt;-->
    <!--<check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>-->

    <!--<check customId="mutablesynchronizedbuffer" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">mutable\.SynchronizedBuffer</parameter></parameters>-->
        <!--<customMessage><![CDATA[-->
          <!--Are you sure that you want to use mutable.SynchronizedBuffer? In most cases, you should use-->
          <!--java.util.concurrent.ConcurrentLinkedQueue instead.-->
          <!--If you must use mutable.SynchronizedBuffer, wrap the code block with-->
          <!--// scalastyle:off mutablesynchronizedbuffer-->
          <!--mutable.SynchronizedBuffer[...]-->
          <!--// scalastyle:on mutablesynchronizedbuffer-->
        <!--]]></customMessage>-->
    <!--</check>-->

    <!--<check customId="javaconversions" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">JavaConversions</parameter></parameters>-->
        <!--<customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import-->
            <!--scala.collection.JavaConverters._ and use .asScala / .asJava methods</customMessage>-->
    <!--</check>-->

    <!--<check customId="commonslang2" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">org\.apache\.commons\.lang\.</parameter></parameters>-->
        <!--<customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead-->
            <!--of Commons Lang 2 (package org.apache.commons.lang.*)</customMessage>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="groups">java,scala,3rdParty,spark</parameter>-->
            <!--<parameter name="group.java">javax?\..*</parameter>-->
            <!--<parameter name="group.scala">scala\..*</parameter>-->
            <!--<parameter name="group.3rdParty">(?!com\.intel\.analytics\.bigdl\.).*</parameter>-->
            <!--<parameter name="group.bigdl">com\.intel\.analytics\.bigdl\..*</parameter>-->
        <!--</parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="tokens">COMMA</parameter>-->
        <!--</parameters>-->
    <!--</check>-->

    <!--<check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">\)\{</parameter></parameters>-->
        <!--<customMessage><![CDATA[-->
      <!--Single Space between ')' and `{`.-->
    <!--]]></customMessage>-->
    <!--</check>-->

    <!--<check customId="NoScalaDoc" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1  [*]</parameter></parameters>-->
        <!--<customMessage>Use Javadoc style indentation for multiline comments</customMessage>-->
    <!--</check>-->

    <!--<check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">case[^\n>]*=>\s*\{</parameter></parameters>-->
        <!--<customMessage>Omit braces in case clauses.</customMessage>-->
    <!--</check>-->

    <!--<check customId="OverrideJavaCase" level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
        <!--<parameters><parameter name="regex">^Override$</parameter></parameters>-->
        <!--<customMessage>override modifier should be used instead of @java.lang.Override.</customMessage>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check>-->

    <!--<check customId="noSpaceBeforeLeftBracket" level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"></check>-->
    <!--<check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"></check>-->

    <!--<check customId="methodName" level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">-->
        <!--<parameters>-->
            <!--<parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>-->
        <!--</parameters>-->
    <!--</check>-->

    <!--<check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>-->


</scalastyle>